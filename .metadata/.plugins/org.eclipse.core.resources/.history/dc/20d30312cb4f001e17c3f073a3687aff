package lab.cse;

import java.util.Scanner;
import java.util.Random;


public class MergeSort {
	static final int MAX = 10005;
	static int [] a = new int[MAX];
	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.println("Enter the MAX array size : ");
		int n = input.nextInt();
		Random random = new Random();
		System.out.println("Enter the array elements : ");
		for(int i=0;i<n;i++)
			a[i] = random.nextInt(1000);
		long startTime = System.nanoTime();
		mergeSortAlgorithm(0,n-1);
		long elapsedTime = System.nanoTime() - startTime;
		System.out.println("Time complexity for n = "+n+" is "+(double)elapsedTime/1000000+" ms");
		System.out.println("Sorted array : ");
		for(int i=0;i<n;i++)
			System.out.print(a[i]+" ");
		input.close();
	}
	public static void mergeSortAlgorithm(int low, int high){
		int mid;
		if(low<high) {
			mid = (low+high)/2;
			mergeSortAlgorithm(low,mid);
			mergeSortAlgorithm(mid+1,high);
			merge(low,mid,high);
		}
	}
	private static void merge(int low, int mid, int high) {
		int [] b = new int[MAX];
		int h, i, j, k;
		i=h=low;
		j = mid+1;
		while((h<=mid)&&(j<=high)) {
			if(a[h]<a[j])
				b[i++]=a[h++];
			else
				b[i++] = a[h++];
		}
			if(h>mid)
				for(k=j;k<=mid;k++)
					b[i++] = a[k];
			else
				for(k=h;k<=high;k++)
					a[i++k] = b[k];
	}
}
